<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<plugin xmlns="http://www.urbancode.com/PluginXMLSchema_v1">
    <header>
        <identifier id="com.serena.air.plugin.DockerCompose" name="Docker Compose" version="8"/>
        <description>
            Provides tasks to interact with Docker Compose.
        </description>
        <tag>Integration/Configuration Management/Docker Compose</tag>
    </header>

    <step-type name="Docker Compose Up">
        <description>
            This step starts all of the applications services that are defined in compose file(s).
            It checks what services are defined in the provided compose files and adds any
            compose override files that exist for DA components of the same name.
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox"
                             default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="composeOptions">
                <property-ui type="textBox"
                             label="Additional Options"
                             description="Specify additional command-line options for the docker-compose up command."/>
            </property>
            <property name="scriptPaths">
                <property-ui type="textBox"
                             label="Environment Script Paths"
                             description="Specify the paths to shell scripts to run before the compose command runs.
                                This property is utilized only on *nix machines."/>
            </property>
            <property name="commandPath" required="false">
                <property-ui type="textBox"
                             hidden="true"
                             label="Compose Path"
                             description="The name of the docker-compose command if it is in the system path,
                                or the full path to run the docker-compose command."/>
            </property>
            <property name="runDetached">
                <property-ui type="checkBox" label="Run Detached"
                             hidden="true"
                             default-value="true"
                             description="Unselect this option to run in the foreground."/>
            </property>
            <property name="envPropValues">
                <property-ui type="textAreaBox"
                             label="Environment Property Values"
                             hidden="true"
                             description="Specify environment variables by separating the name and value by an
                                equals sign and each pair by a newline or comma. Values specified here will
                                take precedence over the environment script variables."
                             default-value="${p:environment/allProperties}"/>
            </property>
            <property name="saveScript">
                <property-ui type="checkBox"
                             label="Do Not Delete Script"
                             hidden="true"
                             description="Select to save the plugin's generated executable script to analyze and run manually later."
                             default-value="false"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ComposeUp.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>

    <step-type name="Docker Compose Down">
        <description>
            This step stops all of the applications services that are defined in compose file(s).
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox"
                             default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default Compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="composeOptions">
                <property-ui type="textBox"
                             label="Additional Options"
                             description="Specify additional command-line options for the docker-compose down command."/>
            </property>
            <property name="scriptPaths">
                <property-ui type="textBox"
                             label="Environment Script Paths"
                             description="Specify the paths to shell scripts to run before the compose command runs.
                                This property is utilized only on *nix machines."/>
            </property>
            <property name="commandPath" required="false">
                <property-ui type="textBox" hidden="true"
                             label="Compose Path"
                             description="The name of the docker-compose command if it is in the system path,
                                or the full path to run the docker-compose command."/>
            </property>
            <property name="envPropValues">
                <property-ui type="textAreaBox"
                             label="Environment Property Values"
                             hidden="true"
                             description="Specify environment variables by separating the name and value by an
                                equals sign and each pair by a newline or comma. Values specified here will
                                take precedence over the environment script variables."
                             default-value="${p:environment/allProperties}"/>
            </property>
            <property name="saveScript">
                <property-ui type="checkBox"
                             label="Do Not Delete Script"
                             hidden="true"
                             description="Select to save the plugin's generated executable script to analyze and run manually later."
                             default-value="false"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox" label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ComposeDown.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>

    <step-type name="Docker Compose Config">
        <description>
            This step validates all of the applications services that are defined in compose file(s).
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox"
                             default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default Compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="composeOptions">
                <property-ui type="textBox"
                             label="Additional Options"
                             description="Specify additional command-line options for the docker-compose config command."/>
            </property>
            <property name="envPropValues">
                <property-ui type="textAreaBox"
                             label="Environment Property Values"
                             hidden="true"
                             description="Specify environment variables by separating the name and value by an
                                equals sign and each pair by a newline or comma. Values specified here will
                                take precedence over the environment script variables."
                             default-value="${p:environment/allProperties}"/>
            </property>
            <property name="outputFile">
                <property-ui type="textBox"
                             label="Output File"
                             default-value="docker-compose-all.yml"
                             description="Write the validated config to the given file."/>
            </property>
            <property name="commandPath" required="false">
                <property-ui type="textBox"
                             hidden="true"
                             label="Compose Path"
                             description="The name of the docker-compose command if it is in the system path,
                                or the full path to run the docker-compose command."/>
            </property>
            <property name="saveScript">
                <property-ui type="checkBox"
                             label="Do Not Delete Script"
                             hidden="true"
                             description="Select to save the plugin's generated executable script to analyze and run manually later."
                             default-value="false"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ComposeConfig.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>

    <step-type name="Docker Compose (Generic)">
        <description>
            This step runs a generic docker compose command.
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox"
                             default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="command" required="true">
                <property-ui type="selectBox"
                             label="Compose Command"
                             description="Select the docker-compose command to run."/>
                    <value label="build">build</value>
                    <value label="bundle">bundle</value>
                    <value label="config">config</value>
                    <value label="create">create</value>
                    <value label="down">down</value>
                    <value label="events">events</value>
                    <value label="exec">exec</value>
                    <value label="help">help</value>
                    <value label="kill">kill</value>
                    <value label="logs">logs</value>
                    <value label="pause">pause</value>
                    <value label="port">port</value>
                    <value label="ps">ps</value>
                    <value label="pull">pull</value>
                    <value label="push">push</value>
                    <value label="restart">restart</value>
                    <value label="rm">rm</value>
                    <value label="run">run</value>
                    <value label="scale">scale</value>
                    <value label="start">start</value>
                    <value label="stop">stop</value>
                    <value label="top">top</value>
                    <value label="unpause">unpause</value>
                    <value label="up">up</value>
                    <value label="version">version</value>
            </property>
            <property name="composeOptions">
                <property-ui type="textBox"
                             label="Additional Options"
                             description="Specify additional command-line options for the docker-compose command."/>
            </property>
            <property name="scriptPaths">
                <property-ui type="textBox"
                             label="Environment Script Paths"
                             description="Specify the paths to shell scripts to run before the Docker Compose command runs.
                                This property is utilized only on *nix machines."/>
            </property>
            <property name="commandPath" required="false">
                <property-ui type="textBox"
                             hidden="true"
                             label="Compose Path"
                             description="The name of the docker-compose command if it is in the system path,
                                or the full path to run the docker-compose command."/>
            </property>
            <property name="envPropValues">
                <property-ui type="textAreaBox"
                             label="Environment Property Values"
                             hidden="true"
                             description="Specify environment variables by separating the name and value by an
                                equals sign and each pair by a newline or comma. Values specified here will
                                take precedence over the environment script variables."
                             default-value="${p:environment/allProperties}"/>
            </property>
            <property name="saveScript">
                <property-ui type="checkBox"
                             label="Do Not Delete Script"
                             hidden="true"
                             description="Select to save the plugin's generated executable script to analyze and run manually later."
                             default-value="false"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ComposeGeneric.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>

    <step-type name="Create Compose Overrides">
        <description>
            This step create a compose override file for the specific component and version. The override
            file will contain the name of the image (from the component) and version (from the component version).
        </description>
        <properties>
            <property name="composeFile">
                <property-ui type="textBox"
                             label="Compose File"
                             description="The name of the compose override file to create.
                                The default compose file is \$\{component.name\}-overrides.yml."
                             default-value="${p:component.name}-overrides.yaml"/>
            </property>
            <property name="registryServer">
                <property-ui type="textBox"
                             label="Registry Server"
                             hidden="true"/>
            </property>
            <property name="componentName">
                <property-ui type="textBox"
                             label="Component name"
                             hidden="true"
                             default-value="${p:component.name}"/>
            </property>
            <property name="componentVersion">
                <property-ui type="textBox"
                             label="Component Version"
                             hidden="true"
                             default-value="${p:version.name}"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>

        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ComposeOverrides.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>

    <step-type name="List Services">
        <description>
            This step lists the services defined in a docker-compose file for selection and use in other steps.
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox"
                             default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="userInterventionRequired">
                <property-ui type="checkBox"
                             label="Display Results Selection Dialog"
                             default-value="true"
                             description="Controls whether the information should be displayed"/>
            </property>
            <property name="keyColumnName">
                <property-ui default-value="Name"
                             description="Column name to be used for selection"
                             hidden="true"
                             label="Key column Name for Selection" type="textBox"/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="ListServices.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>


    <step-type name="Get Logs">
        <description>
            This step retrieves the logs for a specified service in a docker-compose file.
        </description>
        <properties>
            <property name="composeFiles">
                <property-ui type="textAreaBox" default-value="docker-compose.yml"
                             label="Compose Files"
                             description="A list of paths to compose YAML files, separated by newline characters.
                                The default compose file is docker-compose.yml."/>
            </property>
            <property name="composeProjectName">
                <property-ui type="textBox"
                             label="Project Name"
                             description="Specify an alternate project name. By default, the project name is the directory name."/>
            </property>
            <property name="serviceName" required="true">
                <property-ui type="textBox"
                             label="Service Name"
                             default-value="${p:prevStep/UIP}"
                             description="The service name can be passed from a previous 'List Services' step or you can enter a service name."/>
            </property>
            <property name="outputFile">
                <property-ui type="textBox"
                             label="Output File"
                             default-value="${p:prevStep/UIP}-log.txt"
                             description="Write the log to the given file."/>
            </property>
            <property name="composeOptions">
                <property-ui type="textBox"
                             label="Additional Options"
                             description="Specify additional command-line options for the docker-compose logs command."/>
            </property>
            <property name="envPropValues">
                <property-ui type="textAreaBox"
                             label="Environment Property Values"
                             hidden="true"
                             description="Specify environment variables by separating the name and value by an
                                equals sign and each pair by a newline or comma. Values specified here will
                                take precedence over the environment script variables."
                             default-value="${p:environment/allProperties}"/>
            </property>
            <property name="showTimestamps" required="false">
                <property-ui type="checkBox"
                             label="Show Timestamps"
                             default-value="false"
                             description="Show timestamps in the log."/>
            </property>
            <property name="logLines" required="false">
                <property-ui type="textBox"
                             label="Number of lines"
                             default-value="-1"
                             description="Number of lines to show from the end of the logs for each container."/>
            </property>
            <property name="commandPath" required="false">
                <property-ui type="textBox"
                             hidden="true"
                             label="Compose Path"
                             description="The name of the docker-compose command if it is in the system path,
                                or the full path to run the docker-compose command."/>
            </property>
            <property name="debug" required="false">
                <property-ui type="checkBox"
                             label="Debug Output"
                             hidden="true"
                             description="Select this option to display debug output during execution."/>
            </property>
        </properties>
        <post-processing><![CDATA[
        if (properties.get("exitCode") != 0) {
            properties.put("Status", "Failure");
        }
        else {
            properties.put("Status", "Success");
        }
     ]]></post-processing>
        <command program="${GROOVY_HOME}/bin/groovy">
            <arg value="-cp"/>
            <arg path="classes:lib/DockerCompose.jar"/>
            <arg value="-Djnp.disableDiscovery=true"/>
            <arg file="GetLogs.groovy"/>
            <arg file="${PLUGIN_INPUT_PROPS}"/>
            <arg file="${PLUGIN_OUTPUT_PROPS}"/>
        </command>
    </step-type>
</plugin>
